//----------------------
// <auto-generated>
//     Backwards compatibility with Menus.
// </auto-generated>
//----------------------
// System.Windows.Forms.NativeMethods
#if NETCOREAPP3_1_OR_GREATER
namespace System.Windows.Forms.Natives;
using System.Runtime.InteropServices;
internal static class NativeMethods {
    public struct RECT {
        public int left;
        public int top;
        public int right;
        public int bottom;
    }

    [StructLayout(LayoutKind.Sequential)]
    public class TPMPARAMS {
        public int cbSize = Marshal.SizeOf(typeof(TPMPARAMS));
        public int rcExclude_left;
        public int rcExclude_top;
        public int rcExclude_right;
        public int rcExclude_bottom;
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
    public struct MENUINFO_T {
        public int cbSize = Marshal.SizeOf(typeof(MENUINFO_T));
        public int fMask;
        public int dwStyle;
        public uint cyMax;
        public nint hbrBack;
        public int dwContextHelpID;
        public nint dwMenuData;

        public MENUINFO_T() { }
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
    public struct MENUITEMINFO_T {
        public int cbSize = Marshal.SizeOf(typeof(MENUITEMINFO_T));
        public int fMask;
        public int fType;
        public int fState;
        public int wID;
        public IntPtr hSubMenu;
        public IntPtr hbmpChecked;
        public IntPtr hbmpUnchecked;
        public IntPtr dwItemData;
        public string dwTypeData;
        public int cch;
        public IntPtr hbmpItem;

        public MENUITEMINFO_T() { }
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
    public struct MENUITEMINFO_T_RW {
        public int cbSize = Marshal.SizeOf(typeof(MENUITEMINFO_T_RW));
        public int fMask;
        public int fType;
        public int fState;
        public int wID;
        public IntPtr hSubMenu;
        public IntPtr hbmpChecked;
        public IntPtr hbmpUnchecked;
        public IntPtr dwItemData;
        public IntPtr dwTypeData;
        public int cch;
        public IntPtr hbmpItem;

        public MENUITEMINFO_T_RW() { }
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct MSAAMENUINFO {
        public int dwMSAASignature;
        public int cchWText;
        public string pszWText;

        public MSAAMENUINFO(string text) {
            dwMSAASignature = -1441927155;
            cchWText = text.Length;
            pszWText = text;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public class DRAWITEMSTRUCT {
        public int CtlType;
        public int CtlID;
        public int itemID;
        public int itemAction;
        public int itemState;
        public IntPtr hwndItem;
        public IntPtr hDC;
        public RECT rcItem;
        public IntPtr itemData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public class MEASUREITEMSTRUCT {
        public int CtlType;
        public int CtlID;
        public int itemID;
        public int itemWidth;
        public int itemHeight;
        public IntPtr itemData;
    }

    public static class Util {
        public static int MAKELONG(int low, int high) {
            return (high << 16) | (low & 0xFFFF);
        }
        public static IntPtr MAKELPARAM(int low, int high) {
            return (IntPtr)((high << 16) | (low & 0xFFFF));
        }
        public static int HIWORD(int n) {
            return (n >> 16) & 0xFFFF;
        }
        public static int HIWORD(IntPtr n) {
            return HIWORD((int)(long)n);
        }
        public static int LOWORD(int n) {
            return n & 0xFFFF;
        }
        public static int LOWORD(IntPtr n) {
            return LOWORD((int)(long)n);
        }
        public static int SignedHIWORD(IntPtr n) {
            return SignedHIWORD((int)(long)n);
        }
        public static int SignedLOWORD(IntPtr n) {
            return SignedLOWORD((int)(long)n);
        }
        public static int SignedHIWORD(int n) {
            return (short)((n >> 16) & 0xFFFF);
        }
        public static int SignedLOWORD(int n) {
            return (short)(n & 0xFFFF);
        }
    }

    public sealed class CommonHandles {
        public static readonly int GDI;
        public static readonly int HDC;
        public static readonly int Menu;

        static CommonHandles() {
            GDI = System.Internal.HandleCollector.RegisterType("GDI", 50, 500);
            HDC = System.Internal.HandleCollector.RegisterType("HDC", 100, 2);
            Menu = System.Internal.HandleCollector.RegisterType("Menu", 30, 1000);
        }
    }

    public static HandleRef NullHandleRef = new HandleRef(null, IntPtr.Zero);
}
#endif