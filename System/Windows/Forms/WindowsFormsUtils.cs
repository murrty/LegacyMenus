//----------------------
// <auto-generated>
//     Backwards compatibility with Menus.
// </auto-generated>
//----------------------
// System.Windows.Forms.WindowsFormsUtils
#if NETCOREAPP3_1_OR_GREATER
#nullable enable
namespace System.Windows.Forms;
using System.Collections;
using System.ComponentModel;
using System.Globalization;
internal sealed class WindowsFormsUtils {
    public class ArraySubsetEnumerator : IEnumerator {
        private object[] array;
        private int total;
        private int current;
        public object? Current {
            get {
                if (current == -1) {
                    return null;
                }
                return array[current];
            }
        }

        public ArraySubsetEnumerator(object[] array, int count) {
            this.array = array;
            total = count;
            current = -1;
        }

        public bool MoveNext() {
            if (current < total - 1) {
                current++;
                return true;
            }
            return false;
        }

        public void Reset() {
            current = -1;
        }
    }

    public static char GetMnemonic(string text, bool bConvertToUpperCase) {
        char result = '\0';
        if (text != null) {
            int length = text.Length;
            for (int i = 0; i < length - 1; i++) {
                if (text[i] == '&') {
                    if (text[i + 1] != '&') {
                        result = ((!bConvertToUpperCase) ? char.ToLower(text[i + 1], CultureInfo.CurrentCulture) : char.ToUpper(text[i + 1], CultureInfo.CurrentCulture));
                        break;
                    }
                    i++;
                }
            }
        }
        return result;
    }

    public static bool SafeCompareStrings(string? string1, string? string2, bool ignoreCase) {
        if (string1 == null) {
            if (string2 == null) {
                return true;
            }
            return false;
        }
        if (string2 == null) {
            return false;
        }
        if (string1.Length != string2.Length) {
            return false;
        }
        return string.Compare(string1, string2, ignoreCase, CultureInfo.InvariantCulture) == 0;
    }

    public static string GetComponentName(IComponent component, string? defaultNameValue) {
        string? text = string.Empty;
        if (string.IsNullOrEmpty(defaultNameValue)) {
            if (component.Site != null) {
                text = component.Site.Name;
            }
            if (text == null) {
                text = string.Empty;
            }
        }
        else {
            text = defaultNameValue;
        }
        return text;
    }
}
#endif